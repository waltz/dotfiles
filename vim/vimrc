" Clear all existing autocommands.
autocmd!

call plug#begin()

" must-haves
Plug 'morhetz/gruvbox'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug '907th/vim-auto-save'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'benwainwright/fzf-project'

" lang support
Plug 'vim-ruby/vim-ruby'
Plug 'pangloss/vim-javascript'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'fatih/vim-go'
Plug 'rust-lang/rust.vim'

" eh maybe
Plug 'janko-m/vim-test'
Plug 'mg979/vim-visual-multi', { 'branch': 'master' }
Plug 'ntpeters/vim-better-whitespace'

call plug#end()

set nocompatible
filetype plugin indent on
syntax on
set t_Co=256
set backspace=2
set expandtab
set tabstop=3 shiftwidth=2 softtabstop=2
set autoindent
set number
set guifont=JetBrains\ Mono:h14
set termguicolors
set autoread
set autowrite
set hidden
autocmd! GUIEnter * set vb t_vb=
set directory=~/.vim/backups//
set completeopt=menu,preview
set timeout timeoutlen=1000 ttimeoutlen=100
set updatetime=100

colorscheme gruvbox
set background=dark

" Specific comment styles
autocmd Filetype typescript,javascript,typescriptreact,javascriptreact setlocal commentstring=//\ %s

let g:gitgutter_enabled = 1

" Ignore common binary files when searching or auto-completing.
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" Use ripgrep as our preferred searcher.
" if executable('rg')
"   set grepprg = "rg\ --vimgrep\ --no-heading"
"   set grepformat = "%f:%l:%c:%m"
" endif

" Configure project roots
let g:fzSwitchProjectWorkspaces = [ '~/Code' ]

map <C-P> :FZF<CR>

map <C-\> :NERDTreeToggle<CR>
let NERDTreeShowHidden = 1
let g:NERDTreeChDirMode = 2
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

let g:vim_jsx_pretty_colorful_config = 1

" Open vim-test results in iTerm.
let test#strategy = 'iterm'

nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

let g:auto_save = 1
let g:auto_save_events = ["InsertLeave", "TextChanged"]

let g:better_whitespace_enabled = 1
" Color reference: https://vim.fandom.com/wiki/Xterm256_color_names_for_console_Vim
let g:better_whitespace_ctermcolor = '159' " PaleTurquoise1
let g:better_whitespace_guicolor = '#AFFFFF'

" Highlight Fastlane as Ruby
autocmd BufNewFile,BufRead Fastfile,Matchfile,Appfile,Gymfile,Pluginfile set syntax=ruby

let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-tslint-plugin',
  \ 'coc-eslint',
  \ 'coc-prettier',
  \ 'coc-highlight',
  \ 'coc-solargraph',
  \ ]

" Coc keybindings, ripped from their docs
" https://github.com/neoclide/coc.nvim#example-vim-configuration
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

autocmd CursorHold * silent call CocActionAsync('highlight')
